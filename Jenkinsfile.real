pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:25-cli
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  - name: k8s-tools
    image: lachlanevenson/k8s-kubectl:latest
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }

  environment {
      DOCKERHUB_CREDENTIAL_ID = 'dockerhub-credentials'
  }

  stages {
    stage('Test Docker CLI') {
      steps {
        container('docker') {
          echo "Checking Docker version..."
          sh 'docker version'

          echo "Listing Docker images in Minikube..."
          sh 'docker images'
        }
      }
    }

    stage('1. Checkout Code') {
        steps {
            git url: 'https://github.com/iamamply/jenkins-ci-cd-demo.git', branch: 'main' 
        }
    }

    stage('2. Build and Push Docker Image') {
        steps {
            script {

                def DOCKER_IMAGE = "iamamply/jenkins-ci-cd-demo" // เปลี่ยนเป็นชื่อ Docker Hub Repository ของคุณ
                def IMAGE_TAG = "v${env.BUILD_NUMBER}"
                def FULL_IMAGE_NAME = "${DOCKER_IMAGE}:${IMAGE_TAG}"

                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIAL_ID, 
                                                passwordVariable: 'DOCKER_PASSWORD', 
                                                usernameVariable: 'DOCKER_USER')]) {
                    
                  container('docker') {
                    // 1. ตรวจสอบการเชื่อมต่อ Docker
                    sh 'echo "--- Verifying Docker Daemon Connection ---"'
                    sh 'docker version'

                    // 2. Docker Login
                    sh 'echo "--- Attempting Docker Hub Login ---"'
                    // ใช้ --password-stdin เพื่อให้ Password ไม่ปรากฏใน Log
                    sh "echo \"${DOCKER_PASSWORD}\" | docker login -u ${DOCKER_USER} --password-stdin"

                    sh 'echo "--- Login Successful! ---"'

                    // sh "echo \":: Building Image ${FULL_IMAGE_NAME} ::\""
                    sh "docker build -t ${FULL_IMAGE_NAME} ."

                    // sh "echo \":: Pushing Image ${FULL_IMAGE_NAME} ::\""
                    sh "docker push ${FULL_IMAGE_NAME}"

                    sh 'docker logout'
                  }

                }
            }
        }
    }   
    stage('3. Deploy to Kubernetes') {
        steps {
          script {
            container('docker') {
                def DOCKER_IMAGE = "iamamply/jenkins-ci-cd-demo" // เปลี่ยนเป็นชื่อ Docker Hub Repository ของคุณ
                def IMAGE_TAG = "v${env.BUILD_NUMBER}"
                def FULL_IMAGE_NAME = "${DOCKER_IMAGE}:${IMAGE_TAG}"

                // echo "stage 3!"
                echo "Updating deployment.yaml with image: ${FULL_IMAGE_NAME}"

                sh "sed -i 's|REPLACE_IMAGE_NAME_AND_TAG|${FULL_IMAGE_NAME}|g' k8s/deployment.yaml"

                echo "Applying Kubernetes manifests..."
            }
          }
        }
    }  
    stage('4. Deploy to Kubernetes') {
        steps {
          script {
            container('k8s-tools') {
                sh 'kubectl apply -f k8s/service.yaml'
                sh 'kubectl apply -f k8s/deployment.yaml'
                    
                echo "Deployment successfully triggered!"
            }
          }
        }
    }
  }
}
